datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  myRequests Vendor[] @relation("requests")
  name       String
  id         String    @id
  offering   Vendor[]
  bookings   Booking[]
  postLiked  Post[]
  commentLiked Comment[]
  comments   Comment[] @relation("comments")
}

model Service {
  id Int @id @default(autoincrement())
  name    String  @unique
  synonyms Synonym[]
  vendors Vendor[]
}

model Synonym {
  id Int @id @default(autoincrement())
  name String @unique
  service Service @relation(references: [id], fields: [serviceId])
  serviceId Int
}

model Vendor {
  id             Int      @id @default(autoincrement())
  name           String
  about          String   @default("")
  service        Service  @relation(fields: [serviceName], references: [name], onDelete: Cascade)
  serviceName    String
  posts          Post[]
  offerer        User     @relation(fields: [offererId], references: [id])
  offererId      String
  subscribers    User[]   @relation("requests")
  advert         Boolean  @default(false)
  lat            Float  
  cover          Json[]
  contact        Json
  bookings       Booking[]
  comments       Comment[]
}

model Chat {
  id Int @id 
  messages Json[]
}

model Booking {
  id            Int @id @default(autoincrement())
  booker        User @relation(references: [id], fields: [bookerName])
  bookerName    String
  vendor        Vendor @relation(references: [id], fields: [vendorId], onDelete: Cascade)
  vendorId      Int
  purpose       String
  dueDate       DateTime @default(now())
}

model Post {
  id          Int @id @default(autoincrement())
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId    Int 
  createdAt   DateTime @default(now())
  content String
  media       Json[]
  likes       User[]
  comments    Comment[]
}

model Comment {
  id        Int     @id @default(autoincrement())
  content   String
  postId    Int
  post      Post    @relation(fields: [postId], references: [id])
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], "comments")
  vendorId  Int?
  vendor    Vendor? @relation(fields: [vendorId], references: [id])
  likes     User[]
  createdAt   DateTime @default(now())
}