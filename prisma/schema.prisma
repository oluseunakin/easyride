datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  myRequests Vendor[] @relation("requests")
  name       String
  id         String    @id
  offering   Vendor[]
  bookings   Booking[]
  comments   Comment[]
}

model Service {
  name    String   @id
  vendors Vendor[]
}

model Vendor {
  id             Int      @id @default(autoincrement())
  name           String
  about          String   @default("")
  service        Service  @relation(fields: [serviceName], references: [name])
  serviceName    String
  posts          Post[]
  offerer        User     @relation(fields: [offererId], references: [id])
  offererId      String
  subscribers    User[]   @relation("requests")
  advert         Boolean  @default(false)
  lat            Float
  long           Float
  cover          Media[]
  contact        Contact?
  contactId      Int?
  bookings       Booking[]
}

model Chat {
  id Int @id 
  messages Json[]
}

model Booking {
  id            Int @id @default(autoincrement())
  booker        User @relation(references: [id], fields: [bookerName])
  bookerName    String
  username      String
  vendor        Vendor @relation(references: [id], fields: [vendorId])
  vendorId      Int
  purpose       String
  dueDate       Int
  dueHour       Int
  dueMinute     Int
}

model Contact {
  id      Int      @id @default(autoincrement())
  phone   String?
  address String
  email   String?
  website String?
  open    String?
  close   String?
  vendor  Vendor @relation(references: [id], fields: [vendorId])
  vendorId Int @unique
}

model Post {
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    Int
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String
  media       Media[]
  likes       String[]
  comments    Comment[]
}

model Comment {
  commentor   User  @relation(fields: [commentorId], references: [id])
  commentorId String
  commentorName String @default("")
  id    Int @id @default(autoincrement())
  comment String
  createdAt DateTime @default(now())
  media   Media[]
  post   Post @relation(fields: [postId], references: [id])
  postId Int
}

model Media {
  id       Int     @id @default(autoincrement())
  ct       String
  url      String
  vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId Int?
  post     Post?   @relation(fields: [postId], references: [id])
  postId   Int?
  comment Comment? @relation(fields: [commentId], references: [id]) 
  commentId Int?
}
